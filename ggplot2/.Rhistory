# load hw2data.rda from the working directory
load('hw2data.rda')
# Load libraries
library(ggplot2)
library(plyr)
library(dplyr)
install.packages("dplyr")
# load hw2data.rda from the working directory
load('hw2data.rda')
# Load libraries
library(ggplot2)
library(plyr)
library(dplyr)
# load hw2data.rda from the working directory
load('hw2data.rda')
# Load libraries
library(ggplot2)
library(plyr)
library(dplyr)
# Collect the 30 most common purchases, and get their counts
purchases <- ddply(item.purchases, "ucc", summarize, frequency = length(ucc))
sorted.purchases <- purchases[order(-purchases$frequency), ]
thirty.most.common.purchases <- head(sorted.purchases, 30)
thirty.most.common.purchases
# Perform a join on the item.key table to get the descriptions
most.common.with.descriptions <- inner_join(thirty.most.common.purchases, item.key)
# Build a scatterplot
ggplot(data = most.common.with.descriptions, mapping = aes(x = frequency, y = descr)) + geom_point()+
ggtitle("Thirty Most Common Itemized Purchases") +
labs(x = "Frequency", y = "UCC Category")
household.key
household
# Collect the 30 most common purchases, and get their counts
purchases <- ddply(item.purchases, c("ucc", "newid"), summarize, frequency = length(ucc))
# Collect the 30 most common purchases, and get their counts
purchases <- ddply(item.purchases, "ucc", summarize, frequency = length(ucc))
sorted.purchases <- purchases[order(-purchases$frequency), ]
thirty.most.common.purchases <- head(sorted.purchases, 30)
thirty.most.common.purchases
# Perform a join on the item.key table to get the descriptions
most.common.with.descriptions <- inner_join(thirty.most.common.purchases, item.key)
# Build a scatterplot
ggplot(data = most.common.with.descriptions, mapping = aes(x = frequency, y = descr)) + geom_point()+
ggtitle("Thirty Most Common Itemized Purchases") +
labs(x = "Frequency", y = "UCC Category")
# Collect the 30 most common purchases, and get their counts
purchases <- ddply(merge(item.purchases, "ucc", summarize, frequency = length(ucc)))
# Collect the 30 most common purchases, and get their counts
purchases <- ddply(item.purchases, "ucc", summarize, frequency = length(ucc))
sorted.purchases <- purchases[order(-purchases$frequency), ]
thirty.most.common.purchases <- head(sorted.purchases, 30)
thirty.most.common.purchases
# Perform a join on the item.key table to get the descriptions
most.common.with.descriptions <- inner_join(thirty.most.common.purchases, item.key)
# Build a scatterplot
ggplot(data = most.common.with.descriptions, mapping = aes(x = frequency, y = descr)) + geom_point()+
ggtitle("Thirty Most Common Itemized Purchases") +
labs(x = "Frequency", y = "UCC Category")
# Collect the 30 most common purchases, and get their counts
purchases <- ddply(item.purchases, "ucc", summarize, frequency = length(ucc))
sorted.purchases <- purchases[order(-purchases$frequency), ]
thirty.most.common.purchases <- head(sorted.purchases, 30)
thirty.most.common.purchases
# Perform a join on the item.key table to get the descriptions
most.common.with.descriptions <- inner_join(thirty.most.common.purchases, item.key)
# Build a scatterplot
ggplot(data = most.common.with.descriptions, mapping = aes(x = frequency, y = descr)) + geom_point()+
ggtitle("Thirty Most Common Itemized Purchases") +
labs(x = "Frequency", y = "UCC Category")
help(merge)
# Create a data frame with purchases and household information
purchases.by.household <- merge(household, item.purchases, by = "newid")
# Create a data frame with purchases and household information
purchases.by.household <- merge(household, item.purchases, by = "newid")
purchases <- ddply(item.purchases, "ucc", summarize, frequency = length(ucc))
sorted.purchases <- purchases[order(-purchases$frequency), ]
thirty.most.common.purchases <- head(sorted.purchases, 30)
thirty.most.common.purchases
# Create a data frame with purchases and household information
purchases.by.household <- merge(household, item.purchases, by = "newid")
purchases <- ddply(item.purchases, "ucc", mutate, frequency = length(ucc))
sorted.purchases <- purchases[order(-purchases$frequency), ]
thirty.most.common.purchases <- head(sorted.purchases, 30)
thirty.most.common.purchases
# Create a data frame with purchases and household information
purchases.by.household <- merge(household, item.purchases, by = "newid")
purchases <- ddply(purchases.by.household, "ucc", mutate, frequency = length(ucc))
sorted.purchases <- purchases[order(-purchases$frequency), ]
thirty.most.common.purchases <- head(sorted.purchases, 30)
thirty.most.common.purchases
# Create a data frame with purchases and household information
purchases.by.household <- merge(household, item.purchases, by = "newid")
purchases <- ddply(purchases.by.household, "ucc", summarize, frequency = length(ucc))
sorted.purchases <- purchases[order(-purchases$frequency), ]
thirty.most.common.purchases <- head(sorted.purchases, 30)
thirty.most.common.purchases
# Collect the 30 most common purchases, and get their counts
purchases <- ddply(item.purchases, "ucc", summarize, frequency = length(ucc))
sorted.purchases <- purchases[order(-purchases$frequency), ]
thirty.most.common.purchases <- head(sorted.purchases, 30)
thirty.most.common.purchases
# Perform a join on the item.key table to get the descriptions
most.common.with.descriptions <- inner_join(thirty.most.common.purchases, item.key)
# Build a scatterplot
ggplot(data = most.common.with.descriptions, mapping = aes(x = frequency, y = descr)) + geom_point()+
ggtitle("Thirty Most Common Itemized Purchases") +
labs(x = "Frequency", y = "UCC Category")
problem.3 <- merge(household, income, by = newid)
problem.3 <- merge(household, income, by = "newid"")
problem.3
problem.3 <- merge(household, income, by = "newid")
problem.3
household["age2]"]
household["age2"]
problem.3 <- merge(household, income, by = "newid")
problem.3 <- subset(problem.3, select=c("newid", "age_ref", "age2", "occucod1", "occucod2", "inc_hrs1", "inchrs2"))
problem.3 <- merge(household, income, by = "newid")
problem.3 <- subset(problem.3, select=c("newid", "age_ref", "age2", "occucod1", "occucod2", "inc_hrs1", "inc_hrs2"))
problem.3
problem.3 <- merge(household, income, by = "newid")
problem.3 <- subset(problem.3, select=c("newid", "age_ref", "age2", "occucod1", "occucod2", "inc_hrs1", "inc_hrs2"))
# Create a data frame for each reference person
# Create a data frame for their spouse
spouse.info <- subset(problem.3, select = c("newid", "age2", "occucod2", "inc_hrs2"))
spouse.info
# It wasn't asked for, but I felt that newid was important to retain, in order to keep track of the data for each person
help(subset)
problem.3 <- merge(household, income, by = "newid")
problem.3 <- subset(problem.3, select=c("newid", "age_ref", "age2", "occucod1", "occucod2", "inc_hrs1", "inc_hrs2"))
# Create a data frame for each reference person
# Create a data frame for their spouse
spouse.info <- subset(problem.3, select = c("newid", "age2", "occucod2", "inc_hrs2"))
# Rename columns
rename(spouse.info, c("age2" = "age", "occucod2" = "job", "inc_hrs2" = "hours.worked"))
problem.3 <- merge(household, income, by = "newid")
problem.3 <- subset(problem.3, select=c("newid", "age_ref", "age2", "occucod1", "occucod2", "inc_hrs1", "inc_hrs2"))
# Create a data frame for each reference person
# Create a data frame for their spouse
spouse.info <- subset(problem.3, select = c("newid", "age2", "occucod2", "inc_hrs2"))
# Rename columns
rename(spouse.info, c("newid" = "newid", "age2" = "age", "occucod2" = "job", "inc_hrs2" = "hours.worked"))
problem.3 <- merge(household, income, by = "newid")
problem.3 <- subset(problem.3, select=c("newid", "age_ref", "age2", "occucod1", "occucod2", "inc_hrs1", "inc_hrs2"))
# Create a data frame for each reference person
# Create a data frame for their spouse
spouse.info <- subset(problem.3, select = c("newid", "age2", "occucod2", "inc_hrs2"))
# Rename columns
rename(spouse.info, c("age2" = "age", "occucod2" = "job", "inc_hrs2" = "hours.worked"))
problem.3 <- merge(household, income, by = "newid")
problem.3 <- subset(problem.3, select=c("newid", "age_ref", "age2", "occucod1", "occucod2", "inc_hrs1", "inc_hrs2"))
# Create a data frame for each reference person
# Create a data frame for their spouse
spouse.info <- subset(problem.3, select = c("newid", "age2", "occucod2", "inc_hrs2"))
# Rename columns
plyr::rename(spouse.info, c("age2" = "age", "occucod2" = "job", "inc_hrs2" = "hours.worked"))
spouse.info
# It wasn't asked for, but I felt that newid was important to retain, in order to keep track of the data for each person
problem.3 <- merge(household, income, by = "newid")
problem.3 <- subset(problem.3, select=c("newid", "age_ref", "age2", "occucod1", "occucod2", "inc_hrs1", "inc_hrs2"))
# Create a data frame for each reference person
# Create a data frame for their spouse
spouse.info <- subset(problem.3, select = c("newid", "age2", "occucod2", "inc_hrs2"))
# Rename columns
spouse.info <- plyr::rename(spouse.info, c("age2" = "age", "occucod2" = "job", "inc_hrs2" = "hours.worked"))
spouse.info
# It wasn't asked for, but I felt that newid was important to retain, in order to keep track of the data for each person
problem.3 <- merge(household, income, by = "newid")
problem.3 <- subset(problem.3, select=c("newid", "age_ref", "age2", "occucod1", "occucod2", "inc_hrs1", "inc_hrs2"))
# Create a data frame for each reference person
reference.people <- subset(problem.3, select = c("newid", "age_ref", "occucod1", "inc_hrs1"))
reference.people <- plyr::rename(reference.people, c("age_ref" = "age", "occucod1" = "job", "inc_hrs1" = "hours.worked"))
# Create a data frame for their spouse and rename columns to match
spouse.info <- subset(problem.3, select = c("newid", "age2", "occucod2", "inc_hrs2"))
spouse.info <- plyr::rename(spouse.info, c("age2" = "age", "occucod2" = "job", "inc_hrs2" = "hours.worked"))
# It wasn't asked for, but I felt that newid was important to retain, in order to keep track of the data for each person
problem.3 <- merge(household, income, by = "newid")
problem.3 <- subset(problem.3, select=c("newid", "age_ref", "age2", "occucod1", "occucod2", "inc_hrs1", "inc_hrs2"))
# Create a data frame for each reference person
reference.people <- subset(problem.3, select = c("newid", "age_ref", "occucod1", "inc_hrs1"))
reference.people <- plyr::rename(reference.people, c("age_ref" = "age", "occucod1" = "job", "inc_hrs1" = "hours.worked"))
# Create a data frame for their spouse and rename columns to match
spouse.info <- subset(problem.3, select = c("newid", "age2", "occucod2", "inc_hrs2"))
spouse.info <- plyr::rename(spouse.info, c("age2" = "age", "occucod2" = "job", "inc_hrs2" = "hours.worked"))
# It wasn't asked for, but I felt that newid was important to retain, in order to keep track of the data for each person
problem.3.final <- rbind(reference.people, spouse.info)
problem.3 <- merge(household, income, by = "newid")
problem.3 <- subset(problem.3, select=c("newid", "age_ref", "age2", "occucod1", "occucod2", "inc_hrs1", "inc_hrs2"))
# Create a data frame for each reference person
reference.people <- subset(problem.3, select = c("newid", "age_ref", "occucod1", "inc_hrs1"))
reference.people <- plyr::rename(reference.people, c("age_ref" = "age", "occucod1" = "job", "inc_hrs1" = "hours.worked"))
# Create a data frame for their spouse and rename columns to match
spouse.info <- subset(problem.3, select = c("newid", "age2", "occucod2", "inc_hrs2"))
spouse.info <- plyr::rename(spouse.info, c("age2" = "age", "occucod2" = "job", "inc_hrs2" = "hours.worked"))
# It wasn't asked for, but I felt that newid was important to retain, in order to keep track of the data for each person
problem.3.final <- rbind(reference.people, spouse.info)
problem.3.final
help(rbind)
problem.3 <- merge(household, income, by = "newid")
problem.3 <- subset(problem.3, select=c("newid", "age_ref", "age2", "occucod1", "occucod2", "inc_hrs1", "inc_hrs2"))
# Create a data frame for each reference person
reference.people <- subset(problem.3, select = c("newid", "age_ref", "occucod1", "inc_hrs1"))
reference.people <- plyr::rename(reference.people, c("age_ref" = "age", "occucod1" = "job", "inc_hrs1" = "hours.worked"))
# Create a data frame for their spouse and rename columns to match
spouse.info <- subset(problem.3, select = c("newid", "age2", "occucod2", "inc_hrs2"))
spouse.info <- plyr::rename(spouse.info, c("age2" = "age", "occucod2" = "job", "inc_hrs2" = "hours.worked"))
# It wasn't asked for, but I felt that newid was important to retain, in order to keep track of the data for each person
problem.3.final <- rbind(reference.people, spouse.info)
problem.3.final <- group_by(problem.3.final, "newid")
problem.3.final
problem.3 <- merge(household, income, by = "newid")
problem.3 <- subset(problem.3, select=c("newid", "age_ref", "age2", "occucod1", "occucod2", "inc_hrs1", "inc_hrs2"))
# Create a data frame for each reference person
reference.people <- subset(problem.3, select = c("newid", "age_ref", "occucod1", "inc_hrs1"))
reference.people <- plyr::rename(reference.people, c("age_ref" = "age", "occucod1" = "job", "inc_hrs1" = "hours.worked"))
# Create a data frame for their spouse and rename columns to match
spouse.info <- subset(problem.3, select = c("newid", "age2", "occucod2", "inc_hrs2"))
spouse.info <- plyr::rename(spouse.info, c("age2" = "age", "occucod2" = "job", "inc_hrs2" = "hours.worked"))
# It wasn't asked for, but I felt that newid was important to retain, in order to keep track of the data for each person
problem.3.final <- rbind(reference.people, spouse.info)
problem.3.final <- problem.3.final[order(newid), ]
problem.3 <- merge(household, income, by = "newid")
problem.3 <- subset(problem.3, select=c("newid", "age_ref", "age2", "occucod1", "occucod2", "inc_hrs1", "inc_hrs2"))
# Create a data frame for each reference person
reference.people <- subset(problem.3, select = c("newid", "age_ref", "occucod1", "inc_hrs1"))
reference.people <- plyr::rename(reference.people, c("age_ref" = "age", "occucod1" = "job", "inc_hrs1" = "hours.worked"))
# Create a data frame for their spouse and rename columns to match
spouse.info <- subset(problem.3, select = c("newid", "age2", "occucod2", "inc_hrs2"))
spouse.info <- plyr::rename(spouse.info, c("age2" = "age", "occucod2" = "job", "inc_hrs2" = "hours.worked"))
# It wasn't asked for, but I felt that newid was important to retain, in order to keep track of the data for each person
problem.3.final <- rbind(reference.people, spouse.info)
problem.3.final <- problem.3.final[order(problem.3.final$newid), ]
problem.3.final
# Group by job and find the averages, ignoring rows with NA
ddply(problem.3.final, "job", summarize, avg.age = mean(age, na.rm=TRUE), avg.hours = mean(hours.worked, na.rm=TRUE))
# Group by job and find the averages, ignoring rows with NA
job.category.averages <- ddply(problem.3.final, "job", summarize, avg.age = mean(age, na.rm=TRUE), avg.hours = mean(hours.worked, na.rm=TRUE))
job.category.averages <- job.category.averages[order(job.category.averages$avg.hours), ]
job.category.averages
problem.3 <- merge(household, income, by = "newid")
problem.3 <- subset(problem.3, select=c("newid", "age_ref", "age2", "occucod1", "occucod2", "inc_hrs1", "inc_hrs2"))
# Create a data frame for each reference person
reference.people <- subset(problem.3, select = c("newid", "age_ref", "occucod1", "inc_hrs1"))
reference.people <- plyr::rename(reference.people, c("age_ref" = "age", "occucod1" = "job", "inc_hrs1" = "hours.worked"))
# Create a data frame for their spouse and rename columns to match
spouse.info <- subset(problem.3, select = c("newid", "age2", "occucod2", "inc_hrs2"))
spouse.info <- filter(spouse.info, !is.na(age2))
spouse.info <- plyr::rename(spouse.info, c("age2" = "age", "occucod2" = "job", "inc_hrs2" = "hours.worked"))
# It wasn't asked for, but I felt that newid was important to retain, in order to keep track of the data for each person
# I then sort the resulting data frame so that households are grouped together
problem.3.final <- rbind(reference.people, spouse.info)
problem.3.final <- problem.3.final[order(problem.3.final$newid), ]
problem.3.final
# Group by job and find the averages, ignoring rows with NA
job.category.averages <- ddply(problem.3.final, "job", summarize, avg.age = mean(age, na.rm=TRUE), avg.hours = mean(hours.worked, na.rm=TRUE))
job.category.averages <- job.category.averages[order(job.category.averages$avg.hours), ]
job.category.averages
# load hw2data.rda from the working directory
load('hw2data.rda')
# Load libraries
library(ggplot2)
library(plyr)
library(dplyr)
# Collect the 30 most common purchases, and get their counts
purchases <- ddply(item.purchases, "ucc", summarize, frequency = length(ucc))
sorted.purchases <- purchases[order(-purchases$frequency), ]
thirty.most.common.purchases <- head(sorted.purchases, 30)
thirty.most.common.purchases
# Perform a join on the item.key table to get the descriptions
most.common.with.descriptions <- inner_join(thirty.most.common.purchases, item.key)
# Build a scatterplot
ggplot(data = most.common.with.descriptions, mapping = aes(x = frequency, y = descr)) + geom_point()+
ggtitle("Thirty Most Common Itemized Purchases") +
labs(x = "Frequency", y = "UCC Category")
problem.3 <- merge(household, income, by = "newid")
problem.3 <- subset(problem.3, select=c("newid", "age_ref", "age2", "occucod1", "occucod2", "inc_hrs1", "inc_hrs2"))
# Create a data frame for each reference person
reference.people <- subset(problem.3, select = c("newid", "age_ref", "occucod1", "inc_hrs1"))
reference.people <- plyr::rename(reference.people, c("age_ref" = "age", "occucod1" = "job", "inc_hrs1" = "hours.worked"))
# Create a data frame for their spouse and rename columns to match
spouse.info <- subset(problem.3, select = c("newid", "age2", "occucod2", "inc_hrs2"))
# Remove entries for no spouse (i.e. age = NA)
spouse.info <- filter(spouse.info, !is.na(age2))
spouse.info <- plyr::rename(spouse.info, c("age2" = "age", "occucod2" = "job", "inc_hrs2" = "hours.worked"))
# It wasn't asked for, but I felt that newid was important to retain, in order to keep track of the data for each person
# I then sort the resulting data frame so that households are grouped together
problem.3.final <- rbind(reference.people, spouse.info)
problem.3.final <- problem.3.final[order(problem.3.final$newid), ]
head(problem.3.final)
# Group by job and find the averages, ignoring rows with NA
job.category.averages <- ddply(problem.3.final, "job", summarize, avg.age = mean(age, na.rm=TRUE), avg.hours = mean(hours.worked, na.rm=TRUE))
job.category.averages <- job.category.averages[order(job.category.averages$avg.hours), ]
job.category.averages
# add code here with comments
ggplot(data = job.category.averages, mapping = aes(x = job, ymin = ymin, ymax = ymax)) + geom_errorbar(width=.3) + geom_point(mapping=aes(y=avg.hours), size=4)
errorbar.plot = ggplot(data = job.category.averages, mapping=aes(x=job, y=avg.hours)) + stat_summary(fun.data = mean_cl_normal, geom='errorbar', width=.3)
errorbar.plot
install.packages("Hmisc")
# load hw2data.rda from the working directory
load('hw2data.rda')
# Load libraries
library(ggplot2)
library(plyr)
library(dplyr)
library(Hmisc)
errorbar.plot = ggplot(data = job.category.averages, mapping=aes(x=job, y=avg.hours)) + stat_summary(fun.data = mean_cl_normal, geom='errorbar', width=.3)
errorbar.plot
