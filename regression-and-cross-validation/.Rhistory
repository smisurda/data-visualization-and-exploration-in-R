#lm(nonelderly.model.log)
# Chunk 10
# Apply a power transform to the data, settling on 1/8 after trial and error
nonelderly.households$healthcare <- (nonelderly.households$healthcare)^(1/8)
# Call the function defined above to select a value for DF and fit a natural spline
glm.cv.loop(nonelderly.households, "healthcare ~ ns(age.interviewee, df = DF)", seq (1, 10, by = 1))
# Select df value and build model (either 2 or 4)
nonelderly.model <- glm(healthcare ~ ns(age.interviewee, df = 2), data = nonelderly.households)
# Plot predictions with a spline fit
ggplot(data = nonelderly.households, mapping = aes(x = age.interviewee, y = healthcare)) +
geom_point() +
labs( y = "Healthcare Spending", x = "Age") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = 'glm', formula = y ~ ns(x, df = 2)) + labs(title='Prediction with df = 2 \n Trend Line = healthcare ~ ns(age.interviewee, df = 2)')
# Make s-l plot
nonelderly.households <- mutate(nonelderly.households, pred = predict(nonelderly.model), resid = resid(nonelderly.model))
ggplot(data = nonelderly.households, mapping = aes(x = pred, y = sqrt(abs(resid)))) +
geom_point(size = 1) +
geom_smooth() +
labs(title = "S-L Plot Transformed Data") +
theme(plot.title = element_text(hjust = 0.5))
# Chunk 11
# Plot residuals against predicted value
healthcare.augmented <- augment(nonelderly.model, data = nonelderly.households)
ggplot(data = healthcare.augmented, mapping = aes(x = .resid, y = .fitted)) +
geom_point() +
geom_smooth() +
labs(x = 'Residuals', y = 'Predictions', title = 'Residuals vs. Predicted') +
theme(plot.title = element_text(hjust = 0.5))
# Chunk 12
# Bin the data into 5 age groups
healthcare.augmented.bin <- healthcare.augmented
healthcare.augmented.bin$age.interviewee <- cut(healthcare.augmented.bin$age.interviewee, breaks = c(0, 25, 35, 45, 55, 99))
healthcare.augmented.bin <- mutate(healthcare.augmented.bin, actual.age = healthcare.augmented$age.interviewee)
many.QQplots = ddply(healthcare.augmented.bin, 'age.interviewee', Find.QQ, '.resid', y = healthcare.augmented.bin$.resid )
ggplot(data = many.QQplots, mapping = aes(x = q1, y = q2)) + geom_point() + facet_wrap('age.interviewee', nrow = 2) +
labs(x = 'All Residuals', y = 'Group Residuals', title = 'QQ plots \n Age Group Residuals vs. All Residuals') +
geom_abline(slope = 1) +
theme(plot.title = element_text(hjust = 0.5))
# Chunk 13
# your code here
# Chunk 14
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)^(1/8)
healthcare.power.transform.model <- glm(healthcare ~ ns(age.interviewee, df = 2), data = healthcare.power.transform)
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)^(1/8)
healthcare.power.transform.model <- glm(healthcare ~ ns(age.interviewee, df = 2), data = healthcare.power.transform)
ggplot(data = healthcare.power.transform, mapping = aes(x = pred, y = sqrt(abs(resid)))) +
geom_point(size = 1) +
geom_smooth() +
labs(title = "S-L Plot Transformed Data") +
theme(plot.title = element_text(hjust = 0.5))
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)^(1/8)
healthcare.power.transform.model <- lm(healthcare ~ age.interviewee, data = healthcare.power.transform)
ggplot(data = healthcare.power.transform, mapping = aes(x = pred, y = sqrt(abs(resid)))) +
geom_point(size = 1) +
geom_smooth() +
labs(title = "S-L Plot Transformed Data") +
theme(plot.title = element_text(hjust = 0.5))
healthcare.power.transform.model$residuals
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)^(1/8)
healthcare.power.transform.model <- lm(healthcare ~ age.interviewee, data = healthcare.power.transform)
plot(healthcare.power.transform.model$residuals)
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)^(1/8)
healthcare.power.transform.model <- glm(healthcare ~ age.interviewee, data = healthcare.power.transform)
plot(healthcare.power.transform.model$residuals)
help(qqline)
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)^(1/8)
healthcare.power.transform.model <- glm(healthcare ~ age.interviewee, data = healthcare.power.transform)
qqnorm(healthcare.power.transform.model$residuals)
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)^(1/8)
healthcare.power.transform.model <- glm(healthcare ~ age.interviewee, data = healthcare.power.transform)
summary(healthcare.power.transform.model)
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)#^(1/8)
healthcare.power.transform.model <- glm(healthcare ~ age.interviewee, data = healthcare.power.transform)
summary(healthcare.power.transform.model)
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)#^(1/8)
healthcare.power.transform.model <- glm(healthcare ~ age.interviewee, data = healthcare.power.transform)
summary(healthcare.power.transform.model)
plot(healthcare.power.transform.model$residuals)
nonelderly.quantiles <- Pool.Residuals(data.augment = healthcare.augmented.bin, x='income.rank')
nonelderly.quantiles <- Pool.Residuals(data.augment = healthcare.augmented.bin, x = 'age.interviewee')
nonelderly.quantiles <- Pool.Residuals(data.augment = healthcare.augmented.bin, x = 'age.interviewee')
ggplot(data = log.quantiles, mapping=aes(x=age.interviewee, y=exp(value), color=variable)) +
geom_point(data = log.augment, mapping=aes(x=income.rank, y=apparel), color='black', size=1) +
geom_line(size=1) +
scale_color_brewer(palette = 'Set1', limits = c('q5', 'q4', 'q3', 'q2', 'q1'), labels = c('95%', '85%', '50%', '15%', '5%')) + labs(x = 'Age Interviewee', y='Healthcare (Dollars)', color = 'Estimated \nQuantiles')
nonelderly.quantiles <- Pool.Residuals(data.augment = healthcare.augmented.bin, x = 'age.interviewee')
ggplot(data = nonelderly.quantiles, mapping=aes(x=age.interviewee, y=exp(value), color=variable)) +
geom_point(data = log.augment, mapping=aes(x=income.rank, y=apparel), color='black', size=1) +
geom_line(size=1) +
scale_color_brewer(palette = 'Set1', limits = c('q5', 'q4', 'q3', 'q2', 'q1'), labels = c('95%', '85%', '50%', '15%', '5%')) + labs(x = 'Age Interviewee', y='Healthcare (Dollars)', color = 'Estimated \nQuantiles')
nonelderly.quantiles <- Pool.Residuals(data.augment = healthcare.augmented.bin, x = 'age.interviewee')
ggplot(data = nonelderly.quantiles, mapping=aes(x=age.interviewee, y=exp(value), color=variable)) +
geom_point(data = data.augment, mapping=aes(x=age.interviewee, y=healthcare), color='black', size=1) +
geom_line(size=1) +
scale_color_brewer(palette = 'Set1', limits = c('q5', 'q4', 'q3', 'q2', 'q1'), labels = c('95%', '85%', '50%', '15%', '5%')) + labs(x = 'Age Interviewee', y='Healthcare (Dollars)', color = 'Estimated \nQuantiles')
nonelderly.quantiles <- Pool.Residuals(data.augment = healthcare.augmented.bin, x = 'age.interviewee')
ggplot(data = nonelderly.quantiles, mapping=aes(x=age.interviewee, y=exp(value), color=variable)) +
geom_point(data = healthcare.augmented.bin, mapping=aes(x=age.interviewee, y=healthcare), color='black', size=1) +
geom_line(size=1) +
scale_color_brewer(palette = 'Set1', limits = c('q5', 'q4', 'q3', 'q2', 'q1'), labels = c('95%', '85%', '50%', '15%', '5%')) + labs(x = 'Age Interviewee', y='Healthcare (Dollars)', color = 'Estimated \nQuantiles')
library(ggplot2)
library(plyr)
library(reshape2)
library(splines)
library(boot)
library(MASS)
library(broom)
set.seed(1)
glm.cv.loop = function(data, formula.text, DF.vector, K=10) {
# make sure boot library is loaded
require(boot)
cv.scores = rep(0, times = length(DF.vector))
for (DF in DF.vector) {
# get the fitted model for current value of DF
spline.model = glm(as.formula(formula.text), data=data)
# run K-fold cross validation
cv = cv.glm(data=data, glmfit=spline.model, K=K)
# extract the cross-validation score
cv.scores[DF] = cv$delta[1]
}
# make the plot
data.out = data.frame(df = DF.vector, cv.scores = cv.scores)
cv.plot = ggplot(data = data.out, mapping=aes(x=df, y=cv.scores)) + geom_point() + labs(x='df', title='Cross Validation Scores') + theme(plot.title = element_text(hjust = 0.5))
# return a list containing the scores and the plot
return( list(scores = cv.scores, plot = cv.plot))
}
Find.QQ = function(.data, column.name, y) {
# how many quantiles are we plotting?
n.pts = min( length(.data[, column.name]), length(y))
# which quantiles are we plotting?
probs = seq(from = 0, to = 1, length.out = n.pts)
# compute these quantiles for each group
q1 = quantile(.data[, column.name], probs= probs)
q2 = quantile(y, probs=probs )
# return them as a data frame
return( data.frame(q1 = q1, q2 = q2))
}
Pool.Residuals = function (data.augment, x, qvec = c(.05, .15, .5, .85, .95)) {
require(plyr)
require(reshape2)
# find the quantiles of the residuals
resid.quantile = quantile(x = data.augment$.resid, probs = qvec)
# add the quantiles of the residuals to the predicted trend
data.augment = mutate(data.augment,
q1 = .fitted + resid.quantile[1],
q2 = .fitted + resid.quantile[2],
q3 = .fitted + resid.quantile[3],
q4 = .fitted + resid.quantile[4],
q5 = .fitted + resid.quantile[5])
# combine all of the quantiles into one column for easier plotting:
data.melt = melt(data.augment, id.vars= x, measure.vars = c('q1', 'q2', 'q3', 'q4', 'q5'))
return( data.melt )
}
# Load the data
healthcare.data <- read.csv("dataset_hw5.csv", header = TRUE)
# Fit a linear model
healthcare.model <- lm(healthcare ~ age.interviewee, data = healthcare.data)
# Show the model
lm(healthcare.model)
# Plot the age distribution
hist(healthcare.data$age.interviewee, breaks = 10, main = "Distribution of Ages", xlab = "Age of Interviewee")
# Show a distribution of ages and healthcare cost
ggplot(data = healthcare.data, mapping = aes(x = age.interviewee, y = healthcare)) +
geom_point() +
labs(title = "Healthcare Spending by Age", y = "Healthcare Spending", x = "Age") +
theme(plot.title = element_text(hjust = 0.5))
# Remove households who did not spend a positive amount or age is not 87.
# I'm assuming that 87 is the max value, based on the text above, which reads 87, not > 87.
healthcare.data.subsetted <- subset(healthcare.data, age.interviewee != 87 & healthcare > 0 )
# Fit a linear model
healthcare.model.subsetted = lm(healthcare ~ age.interviewee, data = healthcare.data.subsetted)
# Show the model
lm(healthcare.model.subsetted)
# Plot the age distribution
hist(healthcare.data.subsetted$age.interviewee, breaks = 10, main = "Distribution of Ages (subsetted)", xlab = "Age of Interviewee")
# Show a distribution of ages and healthcare cost
ggplot(data = healthcare.data.subsetted, mapping = aes(x = age.interviewee, y = healthcare)) +
geom_point() +
labs(title = "Healthcare Spending by Age (Subsetted)", y = "Healthcare Spending", x = "Age") +
theme(plot.title = element_text(hjust = 0.5))
# Fit a linear model using a log transform
# We will use the subsetted data, so that we can take the log of healthcare without worrying about zero values
healthcare.model.subsetted.log = lm(log(healthcare) ~ age.interviewee, data = healthcare.data.subsetted)
# Show the model
lm(healthcare.model.subsetted.log)
# Show a distribution of ages and healthcare cost
ggplot(data = healthcare.data.subsetted, mapping = aes(x = age.interviewee, y = log(healthcare))) +
geom_point() +
labs(title = "log(Healthcare Spending) by Age", y = "log(Healthcare Spending)", x = "Age") +
theme(plot.title = element_text(hjust = 0.5))
# Create subset of those under 63 that pay for healthcare
nonelderly.households <- subset(healthcare.data, age.interviewee <= 63 & healthcare > 0)
####
#
# It's unclear if we want to build the model yet, so I will just leave this commented out
#
# Generate model
#nonelderly.model = lm(healthcare ~ age.interviewee, data = nonelderly.households)
# Show the model
#lm(nonelderly.model)
# Generate model with log transform
#nonelderly.model.log = lm(log(healthcare) ~ age.interviewee, data = nonelderly.households)
# Show the model
#lm(nonelderly.model.log)
# Apply a power transform to the data, settling on 1/8 after trial and error
nonelderly.households$healthcare <- (nonelderly.households$healthcare)^(1/8)
# Call the function defined above to select a value for DF and fit a natural spline
glm.cv.loop(nonelderly.households, "healthcare ~ ns(age.interviewee, df = DF)", seq (1, 10, by = 1))
# Select df value and build model (either 2 or 4)
nonelderly.model <- glm(healthcare ~ ns(age.interviewee, df = 2), data = nonelderly.households)
# Plot predictions with a spline fit
ggplot(data = nonelderly.households, mapping = aes(x = age.interviewee, y = healthcare)) +
geom_point() +
labs( y = "Healthcare Spending", x = "Age") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = 'glm', formula = y ~ ns(x, df = 2)) + labs(title='Prediction with df = 2 \n Trend Line = healthcare ~ ns(age.interviewee, df = 2)')
# Make s-l plot
nonelderly.households <- mutate(nonelderly.households, pred = predict(nonelderly.model), resid = resid(nonelderly.model))
ggplot(data = nonelderly.households, mapping = aes(x = pred, y = sqrt(abs(resid)))) +
geom_point(size = 1) +
geom_smooth() +
labs(title = "S-L Plot Transformed Data") +
theme(plot.title = element_text(hjust = 0.5))
# Plot residuals against predicted value
healthcare.augmented <- augment(nonelderly.model, data = nonelderly.households)
ggplot(data = healthcare.augmented, mapping = aes(x = .resid, y = .fitted)) +
geom_point() +
geom_smooth() +
labs(x = 'Residuals', y = 'Predictions', title = 'Residuals vs. Predicted') +
theme(plot.title = element_text(hjust = 0.5))
# Bin the data into 5 age groups
healthcare.augmented.bin <- healthcare.augmented
healthcare.augmented.bin$age.interviewee <- cut(healthcare.augmented.bin$age.interviewee, breaks = c(0, 25, 35, 45, 55, 99))
healthcare.augmented.bin <- mutate(healthcare.augmented.bin, actual.age = healthcare.augmented$age.interviewee)
many.QQplots <- ddply(healthcare.augmented.bin, 'age.interviewee', Find.QQ, '.resid', y = healthcare.augmented.bin$.resid )
ggplot(data = many.QQplots, mapping = aes(x = q1, y = q2)) + geom_point() + facet_wrap('age.interviewee', nrow = 2) +
labs(x = 'All Residuals', y = 'Group Residuals', title = 'QQ plots \n Age Group Residuals vs. All Residuals') +
geom_abline(slope = 1) +
theme(plot.title = element_text(hjust = 0.5))
nonelderly.quantiles <- Pool.Residuals(data.augment = healthcare.augmented.bin, x = 'age.interviewee')
ggplot(data = nonelderly.quantiles, mapping=aes(x=age.interviewee, y=exp(value), color=variable)) +
geom_point(data = healthcare.augmented.bin, mapping=aes(x=age.interviewee, y=healthcare), color='black', size=1) +
geom_line(size=1) +
scale_color_brewer(palette = 'Set1', limits = c('q5', 'q4', 'q3', 'q2', 'q1'), labels = c('95%', '85%', '50%', '15%', '5%')) + labs(x = 'Age Interviewee', y='Healthcare (Dollars)', color = 'Estimated \nQuantiles')
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)#^(1/8)
healthcare.power.transform.model <- glm(healthcare ~ age.interviewee, data = healthcare.power.transform)
summary(healthcare.power.transform.model)
plot(healthcare.power.transform.model$residuals)
nonelderly.quantiles <- Pool.Residuals(data.augment = healthcare.augmented, x = 'age.interviewee')
ggplot(data = nonelderly.quantiles, mapping=aes(x=age.interviewee, y=exp(value), color=variable)) +
geom_point(data = healthcare.augmented.bin, mapping=aes(x=age.interviewee, y=healthcare), color='black', size=1) +
geom_line(size=1) +
scale_color_brewer(palette = 'Set1', limits = c('q5', 'q4', 'q3', 'q2', 'q1'), labels = c('95%', '85%', '50%', '15%', '5%')) + labs(x = 'Age Interviewee', y='Healthcare (Dollars)', color = 'Estimated \nQuantiles')
nonelderly.quantiles <- Pool.Residuals(data.augment = healthcare.augmented, x = 'age.interviewee')
ggplot(data = nonelderly.quantiles, mapping=aes(x=age.interviewee, y=exp(value), color=variable)) +
geom_point(data = healthcare.augmented, mapping=aes(x=age.interviewee, y=healthcare), color='black', size=1) +
geom_line(size=1) +
scale_color_brewer(palette = 'Set1', limits = c('q5', 'q4', 'q3', 'q2', 'q1'), labels = c('95%', '85%', '50%', '15%', '5%')) + labs(x = 'Age Interviewee', y='Healthcare (Dollars)', color = 'Estimated \nQuantiles')
nonelderly.quantiles <- Pool.Residuals(data.augment = healthcare.augmented, x = 'age.interviewee')
ggplot(data = nonelderly.quantiles, mapping=aes(x=age.interviewee, y=(value)^8, color=variable)) +
geom_point(data = healthcare.augmented, mapping=aes(x=age.interviewee, y=healthcare), color='black', size=1) +
geom_line(size=1) +
scale_color_brewer(palette = 'Set1', limits = c('q5', 'q4', 'q3', 'q2', 'q1'), labels = c('95%', '85%', '50%', '15%', '5%')) + labs(x = 'Age Interviewee', y='Healthcare (Dollars)', color = 'Estimated \nQuantiles')
nonelderly.quantiles <- Pool.Residuals(data.augment = healthcare.augmented, x = 'age.interviewee')
ggplot(data = nonelderly.quantiles, mapping=aes(x=age.interviewee, y=(value), color=variable)) +
geom_point(data = healthcare.augmented, mapping=aes(x=age.interviewee, y=healthcare), color='black', size=1) +
geom_line(size=1) +
scale_color_brewer(palette = 'Set1', limits = c('q5', 'q4', 'q3', 'q2', 'q1'), labels = c('95%', '85%', '50%', '15%', '5%')) + labs(x = 'Age Interviewee', y='Healthcare (Dollars)', color = 'Estimated \nQuantiles')
min(healthcare.power.transform$healthcare)
min(healthcare.data$healthcare)
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)^(1/8)
healthcare.power.transform.model <- glm(healthcare ~ age.interviewee, data = healthcare.power.transform)
summary(healthcare.power.transform.model)
plot(healthcare.power.transform.model$residuals)
min(healthcare.power.transform$healthcare)
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)^(1/7)
healthcare.power.transform.model <- glm(healthcare ~ age.interviewee, data = healthcare.power.transform)
summary(healthcare.power.transform.model)
plot(healthcare.power.transform.model$residuals)
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)^(1/8)
healthcare.power.transform.model <- glm(healthcare ~ age.interviewee, data = healthcare.power.transform)
summary(healthcare.power.transform.model)
plot(healthcare.power.transform.model$residuals)
nonelderly.quantiles <- Pool.Residuals(data.augment = healthcare.augmented, x = 'age.interviewee')
ggplot(data = nonelderly.quantiles, mapping=aes(x=age.interviewee, y=(value), color=variable)) +
geom_point(data = healthcare.augmented, mapping=aes(x=age.interviewee, y=healthcare), color='black', size=1) +
geom_line(size=1) +
scale_color_brewer(palette = 'Set1', limits = c('q5', 'q4', 'q3', 'q2', 'q1'), labels = c('95%', '85%', '50%', '15%', '5%'))+   labs(title = "Estimate of Residual Distribution", x = 'Age Interviewee', y='Healthcare (Dollars)', color = 'Estimated \nQuantiles') +
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
library(plyr)
library(reshape2)
library(splines)
library(boot)
library(MASS)
library(broom)
set.seed(1)
glm.cv.loop = function(data, formula.text, DF.vector, K=10) {
# make sure boot library is loaded
require(boot)
cv.scores = rep(0, times = length(DF.vector))
for (DF in DF.vector) {
# get the fitted model for current value of DF
spline.model = glm(as.formula(formula.text), data=data)
# run K-fold cross validation
cv = cv.glm(data=data, glmfit=spline.model, K=K)
# extract the cross-validation score
cv.scores[DF] = cv$delta[1]
}
# make the plot
data.out = data.frame(df = DF.vector, cv.scores = cv.scores)
cv.plot = ggplot(data = data.out, mapping=aes(x=df, y=cv.scores)) + geom_point() + labs(x='df', title='Cross Validation Scores') + theme(plot.title = element_text(hjust = 0.5))
# return a list containing the scores and the plot
return( list(scores = cv.scores, plot = cv.plot))
}
Find.QQ = function(.data, column.name, y) {
# how many quantiles are we plotting?
n.pts = min( length(.data[, column.name]), length(y))
# which quantiles are we plotting?
probs = seq(from = 0, to = 1, length.out = n.pts)
# compute these quantiles for each group
q1 = quantile(.data[, column.name], probs= probs)
q2 = quantile(y, probs=probs )
# return them as a data frame
return( data.frame(q1 = q1, q2 = q2))
}
Pool.Residuals = function (data.augment, x, qvec = c(.05, .15, .5, .85, .95)) {
require(plyr)
require(reshape2)
# find the quantiles of the residuals
resid.quantile = quantile(x = data.augment$.resid, probs = qvec)
# add the quantiles of the residuals to the predicted trend
data.augment = mutate(data.augment,
q1 = .fitted + resid.quantile[1],
q2 = .fitted + resid.quantile[2],
q3 = .fitted + resid.quantile[3],
q4 = .fitted + resid.quantile[4],
q5 = .fitted + resid.quantile[5])
# combine all of the quantiles into one column for easier plotting:
data.melt = melt(data.augment, id.vars= x, measure.vars = c('q1', 'q2', 'q3', 'q4', 'q5'))
return( data.melt )
}
# Load the data
healthcare.data <- read.csv("dataset_hw5.csv", header = TRUE)
# Fit a linear model
healthcare.model <- lm(healthcare ~ age.interviewee, data = healthcare.data)
# Show the model
lm(healthcare.model)
# Plot the age distribution
hist(healthcare.data$age.interviewee, breaks = 10, main = "Distribution of Ages", xlab = "Age of Interviewee")
# Show a distribution of ages and healthcare cost
ggplot(data = healthcare.data, mapping = aes(x = age.interviewee, y = healthcare)) +
geom_point() +
labs(title = "Healthcare Spending by Age", y = "Healthcare Spending", x = "Age") +
theme(plot.title = element_text(hjust = 0.5))
# Remove households who did not spend a positive amount or age is not 87.
# I'm assuming that 87 is the max value, based on the text above, which reads 87, not > 87.
healthcare.data.subsetted <- subset(healthcare.data, age.interviewee != 87 & healthcare > 0 )
# Fit a linear model
healthcare.model.subsetted = lm(healthcare ~ age.interviewee, data = healthcare.data.subsetted)
# Show the model
lm(healthcare.model.subsetted)
# Plot the age distribution
hist(healthcare.data.subsetted$age.interviewee, breaks = 10, main = "Distribution of Ages (subsetted)", xlab = "Age of Interviewee")
# Show a distribution of ages and healthcare cost
ggplot(data = healthcare.data.subsetted, mapping = aes(x = age.interviewee, y = healthcare)) +
geom_point() +
labs(title = "Healthcare Spending by Age (Subsetted)", y = "Healthcare Spending", x = "Age") +
theme(plot.title = element_text(hjust = 0.5))
# Fit a linear model using a log transform
# We will use the subsetted data, so that we can take the log of healthcare without worrying about zero values
healthcare.model.subsetted.log = lm(log(healthcare) ~ age.interviewee, data = healthcare.data.subsetted)
# Show the model
lm(healthcare.model.subsetted.log)
# Show a distribution of ages and healthcare cost
ggplot(data = healthcare.data.subsetted, mapping = aes(x = age.interviewee, y = log(healthcare))) +
geom_point() +
labs(title = "log(Healthcare Spending) by Age", y = "log(Healthcare Spending)", x = "Age") +
theme(plot.title = element_text(hjust = 0.5))
# Create subset of those under 63 that pay for healthcare
nonelderly.households <- subset(healthcare.data, age.interviewee <= 63 & healthcare > 0)
####
#
# It's unclear if we want to build the model yet, so I will just leave this commented out
#
# Generate model
#nonelderly.model = lm(healthcare ~ age.interviewee, data = nonelderly.households)
# Show the model
#lm(nonelderly.model)
# Generate model with log transform
#nonelderly.model.log = lm(log(healthcare) ~ age.interviewee, data = nonelderly.households)
# Show the model
#lm(nonelderly.model.log)
# Apply a power transform to the data, settling on 1/8 after trial and error
nonelderly.households$healthcare <- (nonelderly.households$healthcare)^(1/8)
# Call the function defined above to select a value for DF and fit a natural spline
glm.cv.loop(nonelderly.households, "healthcare ~ ns(age.interviewee, df = DF)", seq (1, 10, by = 1))
# Select df value and build model (either 2 or 4)
nonelderly.model <- glm(healthcare ~ ns(age.interviewee, df = 4), data = nonelderly.households)
# Plot predictions with a spline fit
ggplot(data = nonelderly.households, mapping = aes(x = age.interviewee, y = healthcare)) +
geom_point() +
labs( y = "Healthcare Spending", x = "Age") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = 'glm', formula = y ~ ns(x, df = 4)) + labs(title='Prediction with df = 4 \n Trend Line = healthcare ~ ns(age.interviewee, df = 4)')
# Make s-l plot
nonelderly.households <- mutate(nonelderly.households, pred = predict(nonelderly.model), resid = resid(nonelderly.model))
ggplot(data = nonelderly.households, mapping = aes(x = pred, y = sqrt(abs(resid)))) +
geom_point(size = 1) +
geom_smooth() +
labs(title = "S-L Plot Transformed Data") +
theme(plot.title = element_text(hjust = 0.5))
# Plot residuals against predicted value
healthcare.augmented <- augment(nonelderly.model, data = nonelderly.households)
ggplot(data = healthcare.augmented, mapping = aes(x = .resid, y = .fitted)) +
geom_point() +
geom_smooth() +
labs(x = 'Residuals', y = 'Predictions', title = 'Residuals vs. Predicted') +
theme(plot.title = element_text(hjust = 0.5))
# Bin the data into 5 age groups
healthcare.augmented.bin <- healthcare.augmented
healthcare.augmented.bin$age.interviewee <- cut(healthcare.augmented.bin$age.interviewee, breaks = c(0, 25, 35, 45, 55, 99))
healthcare.augmented.bin <- mutate(healthcare.augmented.bin, actual.age = healthcare.augmented$age.interviewee)
many.QQplots <- ddply(healthcare.augmented.bin, 'age.interviewee', Find.QQ, '.resid', y = healthcare.augmented.bin$.resid )
ggplot(data = many.QQplots, mapping = aes(x = q1, y = q2)) + geom_point() + facet_wrap('age.interviewee', nrow = 2) +
labs(x = 'All Residuals', y = 'Group Residuals', title = 'QQ plots \n Age Group Residuals vs. All Residuals') +
geom_abline(slope = 1) +
theme(plot.title = element_text(hjust = 0.5))
nonelderly.quantiles <- Pool.Residuals(data.augment = healthcare.augmented, x = 'age.interviewee')
ggplot(data = nonelderly.quantiles, mapping=aes(x=age.interviewee, y=(value), color=variable)) +
geom_point(data = healthcare.augmented, mapping=aes(x=age.interviewee, y=healthcare), color='black', size=1) +
geom_line(size=1) +
scale_color_brewer(palette = 'Set1', limits = c('q5', 'q4', 'q3', 'q2', 'q1'), labels = c('95%', '85%', '50%', '15%', '5%'))+   labs(title = "Estimate of Residual Distribution", x = 'Age Interviewee', y='Healthcare (Dollars)', color = 'Estimated \nQuantiles') +
theme(plot.title = element_text(hjust = 0.5))
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)^(1/8)
healthcare.power.transform.model <- glm(healthcare ~ age.interviewee, data = healthcare.power.transform)
summary(healthcare.power.transform.model)
plot(healthcare.power.transform.model$residuals)
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)^(1/8)
healthcare.power.transform.model <- glm(healthcare ~ age.interviewee, data = healthcare.power.transform)
#summary(healthcare.power.transform.model)
#plot(healthcare.power.transform.model$residuals)
resids <- residuals(healthcare.power.transform.model)
preds <- predict(healthcare.power.transform.model)
plot(resids ~ preds, data = healthcare.power.transform)
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)^(1/8)
healthcare.power.transform.model <- glm(healthcare ~ age.interviewee, data = healthcare.power.transform)
#summary(healthcare.power.transform.model)
#plot(healthcare.power.transform.model$residuals)
healthcare.power.transform.augment<- augment(healthcare.power.transform.model, data = healthcare.power.transform)
ggplot(data = healthcare.power.transform.augment, mapping = aes(x = .resid, y = .fitted)) +
geom_point() +
geom_smooth() +
labs(x = 'Residuals', y = 'Predictions', title = 'Residuals vs. Predicted') +
theme(plot.title = element_text(hjust = 0.5))
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)^(1/8)
healthcare.power.transform.model <- glm(healthcare ~ age.interviewee, data = healthcare.power.transform)
#summary(healthcare.power.transform.model)
#plot(healthcare.power.transform.model$residuals)
healthcare.power.transform.augment<- augment(healthcare.power.transform.model, data = healthcare.power.transform)
ggplot(data = healthcare.power.transform.augment, mapping = aes(x = age.interviewee, y = .resid)) +
geom_point() +
geom_smooth() +
labs(x = 'Residuals', y = 'Predictions', title = 'Residuals vs. Predicted') +
theme(plot.title = element_text(hjust = 0.5))
# Apply a power transform to the data, settling on 1/8 after trial and error
healthcare.power.transform <- healthcare.data
healthcare.power.transform$healthcare <- (healthcare.power.transform$healthcare)^(1/8)
healthcare.power.transform.model <- glm(healthcare ~ age.interviewee, data = healthcare.power.transform)
#summary(healthcare.power.transform.model)
#plot(healthcare.power.transform.model$residuals)
healthcare.power.transform.augment<- augment(healthcare.power.transform.model, data = healthcare.power.transform)
ggplot(data = healthcare.power.transform.augment, mapping = aes(x = age.interviewee, y = .resid)) +
geom_point() +
geom_smooth() +
labs(x = 'Age', y = 'Residual', title = 'Residuals vs. Age') +
theme(plot.title = element_text(hjust = 0.5))
