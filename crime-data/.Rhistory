#xlab("log(Population)")
#per.capita.crime
# Turn off scientific notation
options(scipen = 999)
# Find the per capita violent crime rate for each county
# Also add in the other fields, since the notes of choropleth maps, not plots
county.data <- mutate(county.data,
crimes.per.capita = violent.crimes / population,
births.per.capita = births / population,
deaths.per.capita = deaths / population,
infant.deaths.per.capita = infant.deaths / population)
# Plot the data, applying a log transform to population
#per.capita.crime <-
ggplot(county.data, aes(x = population, y = crimes.per.capita)) + geom_point()
#scale_x_log10() +
#ggtitle("Violent Crime Rates per County") +
#theme(plot.title = element_text(hjust = 0.5))+
#ylab("Crimes Per Capita")+
#xlab("log(Population)")
#per.capita.crime
# Turn off scientific notation
options(scipen = 999)
# Find the per capita violent crime rate for each county
# Also add in the other fields, since the notes of choropleth maps, not plots
county.data <- mutate(county.data,
crimes.per.capita = violent.crimes / population,
births.per.capita = births / population,
deaths.per.capita = deaths / population,
infant.deaths.per.capita = infant.deaths / population)
# Plot the data, applying a log transform to population
#per.capita.crime <-
ggplot(county.data, aes(x = population, y = crimes.per.capita)) #+ geom_point()
#scale_x_log10() +
#ggtitle("Violent Crime Rates per County") +
#theme(plot.title = element_text(hjust = 0.5))+
#ylab("Crimes Per Capita")+
#xlab("log(Population)")
#per.capita.crime
# Turn off scientific notation
options(scipen = 999)
# Find the per capita violent crime rate for each county
# Also add in the other fields, since the notes of choropleth maps, not plots
county.data <- mutate(county.data,
crimes.per.capita = violent.crimes / population,
births.per.capita = births / population,
deaths.per.capita = deaths / population,
infant.deaths.per.capita = infant.deaths / population)
# Plot the data, applying a log transform to population
#per.capita.crime <-
ggplot(county.data, aes(x = population, y = crimes.per.capita) + geom_point() )
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
county.data = read.csv(file = 'county_data.csv', header=TRUE)
load('county_ggplot.rda')
# Turn off scientific notation
options(scipen = 999)
# Find the per capita violent crime rate for each county
# Also add in the other fields, since the notes of choropleth maps, not plots
county.data <- mutate(county.data,
crimes.per.capita = violent.crimes / population,
births.per.capita = births / population,
deaths.per.capita = deaths / population,
infant.deaths.per.capita = infant.deaths / population)
# Plot the data, applying a log transform to population
#per.capita.crime <-
ggplot(county.data, aes(x = population, y = crimes.per.capita)) + geom_point()
#scale_x_log10() +
#ggtitle("Violent Crime Rates per County") +
#theme(plot.title = element_text(hjust = 0.5))+
#ylab("Crimes Per Capita")+
#xlab("log(Population)")
#per.capita.crime
# Turn off scientific notation
options(scipen = 999)
# Find the per capita violent crime rate for each county
# Also add in the other fields, since the notes of choropleth maps, not plots
county.data <- mutate(county.data,
crimes.per.capita = violent.crimes / population,
births.per.capita = births / population,
deaths.per.capita = deaths / population,
infant.deaths.per.capita = infant.deaths / population)
# Plot the data, applying a log transform to population
per.capita.crime <- ggplot(county.data, aes(x = population, y = crimes.per.capita)) + geom_point()
#scale_x_log10() +
#ggtitle("Violent Crime Rates per County") +
#theme(plot.title = element_text(hjust = 0.5))+
#ylab("Crimes Per Capita")+
#xlab("log(Population)")
per.capita.crime
# Turn off scientific notation
options(scipen = 999)
# Find the per capita violent crime rate for each county
# Also add in the other fields, since the notes of choropleth maps, not plots
county.data <- mutate(county.data,
crimes.per.capita = violent.crimes / population,
births.per.capita = births / population,
deaths.per.capita = deaths / population,
infant.deaths.per.capita = infant.deaths / population)
# Plot the data, applying a log transform to population
per.capita.crime <- ggplot(county.data, aes(x = population, y = crimes.per.capita)) + geom_point() +
#scale_x_log10() +
ggtitle("Violent Crime Rates per County") +
theme(plot.title = element_text(hjust = 0.5))+
ylab("Crimes Per Capita")+
xlab("log(Population)")
per.capita.crime
# Turn off scientific notation
options(scipen = 999)
# Find the per capita violent crime rate for each county
# Also add in the other fields, since the notes of choropleth maps, not plots
county.data <- mutate(county.data,
crimes.per.capita = violent.crimes / population,
births.per.capita = births / population,
deaths.per.capita = deaths / population,
infant.deaths.per.capita = infant.deaths / population)
# Plot the data, applying a log transform to population
per.capita.crime <- ggplot(county.data, aes(x = population, y = crimes.per.capita)) + geom_point()
#scale_x_log10() +
per.capita.crime + ggtitle("Violent Crime Rates per County")
#theme(plot.title = element_text(hjust = 0.5))+
#ylab("Crimes Per Capita")+
#xlab("log(Population)")
per.capita.crime
# Turn off scientific notation
options(scipen = 999)
# Find the per capita violent crime rate for each county
# Also add in the other fields, since the notes of choropleth maps, not plots
county.data <- mutate(county.data,
crimes.per.capita = violent.crimes / population,
births.per.capita = births / population,
deaths.per.capita = deaths / population,
infant.deaths.per.capita = infant.deaths / population)
# Plot the data, applying a log transform to population
per.capita.crime <- ggplot(county.data, aes(x = population, y = crimes.per.capita)) + geom_point()
#scale_x_log10() +
#ggtitle("Violent Crime Rates per County") +
#theme(plot.title = element_text(hjust = 0.5))+
#ylab("Crimes Per Capita")+
#xlab("log(Population)")
per.capita.crime
# Turn off scientific notation
options(scipen = 999)
# Find the per capita violent crime rate for each county
# Also add in the other fields, since the notes of choropleth maps, not plots
county.data <- mutate(county.data,
crimes.per.capita = violent.crimes / population,
births.per.capita = births / population,
deaths.per.capita = deaths / population,
infant.deaths.per.capita = infant.deaths / population)
# Plot the data, applying a log transform to population
per.capita.crime <- ggplot(county.data, aes(x = population, y = crimes.per.capita)) + geom_point()
#scale_x_log10() +
#ggtitle("Violent Crime Rates per County") +
#theme(plot.title = element_text(hjust = 0.5))+
#ylab("Crimes Per Capita")+
#xlab("log(Population)")
#per.capita.crime
# Turn off scientific notation
options(scipen = 999)
# Find the per capita violent crime rate for each county
# Also add in the other fields, since the notes of choropleth maps, not plots
county.data <- mutate(county.data,
crimes.per.capita = violent.crimes / population,
births.per.capita = births / population,
deaths.per.capita = deaths / population,
infant.deaths.per.capita = infant.deaths / population)
# Plot the data, applying a log transform to population
ggplot(county.data, aes(x = population, y = crimes.per.capita)) +
geom_point() +
scale_x_log10() +
ggtitle("Violent Crime Rates per County") +
theme(plot.title = element_text(hjust = 0.5))+
ylab("Crimes Per Capita")+
xlab("log(Population)")
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
county.data = read.csv(file = 'county_data.csv', header=TRUE)
load('county_ggplot.rda')
# Turn off scientific notation
options(scipen = 999)
# Find the per capita violent crime rate for each county
# Also add in the other fields, since the notes of choropleth maps, not plots
county.data <- mutate(county.data,
crimes.per.capita = violent.crimes / population,
births.per.capita = births / population,
deaths.per.capita = deaths / population,
infant.deaths.per.capita = infant.deaths / population)
# Plot the data, applying a log transform to population
ggplot(county.data, aes(x = population, y = crimes.per.capita)) +
geom_point() +
scale_x_log10() +
ggtitle("Violent Crime Rates per County") +
theme(plot.title = element_text(hjust = 0.5))+
ylab("Crimes Per Capita")+
xlab("log(Population)")
binomial(5, .1)
binomial(c(1,2,3), .1)
binomial(c(1,2,3))
# State the null hypothesis
null.hypothesis <- .01
# Call function from part 2, with violent crime as the column of interest
violent.crime.residual <- find.std.residual(county.data, county.data$violent.crimes, null.hypothesis)
# Identify high risk counties based on p-values
find.std.residual <- function(county.data, variable, null.prob){
# Add columns for expected null, stdev null, residual, and standardized residualto the data frame
result <- mutate(county.data,
expected.null = population * null.prob,
st.dev.null = sqrt(expected.null * (1 - null.prob)),
residual = variable - expected.null,
std.residual = residual / st.dev.null)
# Order by std.residual
result <- result[order(-result$std.residual),]
# return the resulting data frame
result
}
# State the null hypothesis
null.hypothesis <- .01
# Call function from part 2, with violent crime as the column of interest
violent.crime.residual <- find.std.residual(county.data, county.data$violent.crimes, null.hypothesis)
# Grab the ten highest rows
ten.most.confident <- head(violent.crime.residual, 10)
# Print the result
kable(ten.most.confident)
###
#
# Do I need to comment on my confidence?
###
# State the null hypothesis
null.hypothesis <- .01
# Call function from part 2, with violent crime as the column of interest
violent.crime.residual <- find.std.residual(county.data, county.data$violent.crimes, null.hypothesis)
# Grab the ten highest rows
ten.most.confident <- head(violent.crime.residual, 10)
# Print the result
kable(ten.most.confident)
###
#
# Do I need to comment on my confidence?
###
2539206*.01
25392-50556
# State the null hypothesis
null.hypothesis <- .2
# Call function from part 2, with violent crime as the column of interest
violent.crime.residual <- find.std.residual(county.data, county.data$violent.crimes, null.hypothesis)
# Grab the ten highest rows
ten.most.confident <- head(violent.crime.residual, 10)
# Print the result
kable(ten.most.confident)
###
#
# Do I need to comment on my confidence?
###
# State the null hypothesis
null.hypothesis <- .01
# Call function from part 2, with violent crime as the column of interest
violent.crime.residual <- find.std.residual(county.data, county.data$violent.crimes, null.hypothesis)
# Grab the ten highest rows
ten.most.confident <- head(violent.crime.residual, 10)
# Print the result
kable(ten.most.confident)
###
#
# Do I need to comment on my confidence?
###
# State the null hypothesis
null.hypothesis <- .01
per.capita.violent.crime <- sum(county.data$violent.crimes) / sum(county.data$population)
# Call function from part 2, with violent crime as the column of interest
violent.crime.residual <- find.std.residual(county.data, county.data$violent.crimes, per.capita.violent.crime)
# Grab the ten highest rows
ten.most.confident <- head(violent.crime.residual, 10)
# Print the result
kable(ten.most.confident)
###
#
# Do I need to comment on my confidence?
###
# Creates a choropleth map based on standardized residuals
map.std.residual <- function(county.gg, county.data){
# Merge the county data to the map data
county.mapdata <- merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
county.mapdata <- arrange(county.mapdata, order)
# Return the plot
ggplot(data = county.mapdata, mapping=aes(x= long, y = lat, fill = std.residual, group = group)) + geom_polygon()
}
# Compute the null hypothesis
per.capita.violent.crime <- sum(county.data$violent.crimes) / sum(county.data$population)
# Find the residuals
violent.crime.residual <- find.std.residual(county.data, county.data$violent.crimes, per.capita.violent.crime)
ten.most.confident <- head(violent.crime.residual, 10)
# Print the result of the ten most confident, just for comparison
kable(ten.most.confident)
# Create the map using the full data frame
resulting.map <- map.std.residual(county.gg, violent.crime.residual)
# Customize the map, and print out
# Note that this map contains all of the data, not just the ten highest
resulting.map <- resulting.map + labs(title = "Standard Residuals - Violent Crime")
resulting.map <- resulting.map + scale_fill_gradient2(low = 'grey', high = 'orange')
resulting.map
###
# Still need to comment on why the map is different
#
###
# State the null hypothesis
null.hypothesis <- .01
# Call function from part 2, with violent crime as the column of interest
violent.crime.residual <- find.std.residual(county.data, county.data$violent.crimes, null.hypothesis)
# Grab the ten highest rows
ten.most.confident <- head(violent.crime.residual, 10)
# Print the result
kable(ten.most.confident)
###
#
# Do I need to comment on my confidence?
###
# Compute the null hypothesis
per.capita.violent.crime <- sum(county.data$violent.crimes) / sum(county.data$population)
# Find the residuals
violent.crime.residual <- find.std.residual(county.data, county.data$violent.crimes, per.capita.violent.crime)
ten.most.confident <- head(violent.crime.residual, 10)
# Print the result of the ten most confident, just for comparison
kable(ten.most.confident)
# Create the map using the full data frame
resulting.map <- map.std.residual(county.gg, violent.crime.residual)
# Customize the map, and print out
# Note that this map contains all of the data, not just the ten highest
resulting.map <- resulting.map + labs(title = "Standard Residuals - Violent Crime")
#resulting.map <- resulting.map + scale_fill_gradient2(low = 'grey', high = 'orange')
resulting.map
###
# Still need to comment on why the map is different
#
###
# Compute the null hypothesis
per.capita.violent.crime <- sum(county.data$violent.crimes) / sum(county.data$population)
# Find the residuals
violent.crime.residual <- find.std.residual(county.data, county.data$violent.crimes, per.capita.violent.crime)
ten.most.confident <- head(violent.crime.residual, 10)
# Print the result of the ten most confident, just for comparison
kable(ten.most.confident)
# Create the map using the full data frame
resulting.map <- map.std.residual(county.gg, violent.crime.residual)
# Customize the map, and print out
# Note that this map contains all of the data, not just the ten highest
resulting.map <- resulting.map + labs(title = "Standard Residuals - Violent Crime")
resulting.map <- resulting.map + scale_fill_gradient2(low = 'grey', high = 'orange')
resulting.map
###
# Still need to comment on why the map is different
#
###
help(kable)
# Compute the null hypothesis
per.capita.violent.crime <- sum(county.data$violent.crimes) / sum(county.data$population)
# Find the residuals
violent.crime.residual <- find.std.residual(county.data, county.data$violent.crimes, per.capita.violent.crime)
ten.most.confident <- head(violent.crime.residual, 10)
# Print the result of the ten most confident, just for comparison
kable(ten.most.confident)
# Create the map using the full data frame
resulting.map <- map.std.residual(county.gg, violent.crime.residual)
# Customize the map, and print out
# Note that this map contains all of the data, not just the ten highest
resulting.map <- resulting.map + labs(title = "Standard Residuals - Violent Crime")
resulting.map <- resulting.map + scale_fill_gradient2(low = 'grey', high = 'orange')
resulting.map  <- theme(plot.title = element_text(hjust = 0.5))+
resulting.map
# Compute the null hypothesis
per.capita.violent.crime <- sum(county.data$violent.crimes) / sum(county.data$population)
# Find the residuals
violent.crime.residual <- find.std.residual(county.data, county.data$violent.crimes, per.capita.violent.crime)
ten.most.confident <- head(violent.crime.residual, 10)
# Print the result of the ten most confident, just for comparison
kable(ten.most.confident)
# Create the map using the full data frame
resulting.map <- map.std.residual(county.gg, violent.crime.residual)
# Customize the map, and print out
# Note that this map contains all of the data, not just the ten highest
resulting.map <- resulting.map + labs(title = "Standard Residuals - Violent Crime")
resulting.map <- resulting.map + scale_fill_gradient2(low = 'grey', high = 'orange')
resulting.map  <- resulting.map + theme(plot.title = element_text(hjust = 0.5))+
resulting.map
# Compute the null hypothesis
per.capita.violent.crime <- sum(county.data$violent.crimes) / sum(county.data$population)
# Find the residuals
violent.crime.residual <- find.std.residual(county.data, county.data$violent.crimes, per.capita.violent.crime)
ten.most.confident <- head(violent.crime.residual, 10)
# Print the result of the ten most confident, just for comparison
kable(ten.most.confident)
# Create the map using the full data frame
resulting.map <- map.std.residual(county.gg, violent.crime.residual)
# Customize the map, and print out
# Note that this map contains all of the data, not just the ten highest
resulting.map <- resulting.map + labs(title = "Standard Residuals - Violent Crime")
resulting.map <- resulting.map + scale_fill_gradient2(low = 'grey', high = 'orange')
resulting.map  <- resulting.map + theme(plot.title = element_text(hjust = 0.5))
resulting.map
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
county.data = read.csv(file = 'county_data.csv', header=TRUE)
load('county_ggplot.rda')
# Turn off scientific notation
options(scipen = 999)
# Find the per capita violent crime rate for each county
# Also add in the other fields, since the notes are choropleth maps, not plots
county.data <- mutate(county.data,
crimes.per.capita = violent.crimes / population,
births.per.capita = births / population,
deaths.per.capita = deaths / population,
infant.deaths.per.capita = infant.deaths / population)
# Plot the data, applying a log transform to population
ggplot(county.data, aes(x = population, y = crimes.per.capita)) +
geom_point() +
scale_x_log10() +
ggtitle("Violent Crime Rates per County") +
theme(plot.title = element_text(hjust = 0.5))+
ylab("Crimes Per Capita")+
xlab("log(Population)")
# Identify high risk counties based on p-values
find.std.residual <- function(county.data, variable, null.prob){
# Add columns for expected null, stdev null, residual, and standardized residualto the data frame
result <- mutate(county.data,
expected.null = population * null.prob,
st.dev.null = sqrt(expected.null * (1 - null.prob)),
residual = variable - expected.null,
std.residual = residual / st.dev.null)
# Order by std.residual
result <- result[order(-result$std.residual),]
# return the resulting data frame
result
}
# State the null hypothesis
null.hypothesis <- .01
# Call function from part 2, with violent crime as the column of interest
violent.crime.residual <- find.std.residual(county.data, county.data$violent.crimes, null.hypothesis)
# Grab the ten highest rows
ten.most.confident <- head(violent.crime.residual, 10)
# Print the result
kable(ten.most.confident, caption = "Counties with Highest Violent Crime Rates")
###
# From general knowledge, these locations seem to be fairly high in violent crime. Considering the population size, as well as the per capita rates that are all around .01, I am fairly confident in these values.
###
# Creates a choropleth map based on standardized residuals
map.std.residual <- function(county.gg, county.data){
# Merge the county data to the map data
county.mapdata <- merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
county.mapdata <- arrange(county.mapdata, order)
# Return the plot
ggplot(data = county.mapdata, mapping=aes(x= long, y = lat, fill = std.residual, group = group)) + geom_polygon()
}
# Compute the null hypothesis
per.capita.violent.crime <- sum(county.data$violent.crimes) / sum(county.data$population)
# Find the residuals
violent.crime.residual <- find.std.residual(county.data, county.data$violent.crimes, per.capita.violent.crime)
ten.most.confident <- head(violent.crime.residual, 10)
# Print the result of the ten most confident, just for comparison
kable(ten.most.confident, caption = "Counties with Highest Violent Crime Rates")
# Create the map using the full data frame
resulting.map <- map.std.residual(county.gg, violent.crime.residual)
# Customize the map, and print out
# Note that this map contains all of the data, not just the ten highest
resulting.map <- resulting.map + labs(title = "Standard Residuals - Violent Crime")
resulting.map <- resulting.map + scale_fill_gradient2(low = 'grey', high = 'orange')
resulting.map  <- resulting.map + theme(plot.title = element_text(hjust = 0.5))
resulting.map
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
county.data = read.csv(file = 'county_data.csv', header=TRUE)
load('county_ggplot.rda')
# Turn off scientific notation
options(scipen = 999)
# Find the per capita violent crime rate for each county
# Also add in the other fields, since the notes are choropleth maps, not plots
county.data <- mutate(county.data,
crimes.per.capita = violent.crimes / population,
births.per.capita = births / population,
deaths.per.capita = deaths / population,
infant.deaths.per.capita = infant.deaths / population)
# Plot the data, applying a log transform to population
ggplot(county.data, aes(x = population, y = crimes.per.capita)) +
geom_point() +
scale_x_log10() +
ggtitle("Violent Crime Rates per County") +
theme(plot.title = element_text(hjust = 0.5))+
ylab("Crimes Per Capita")+
xlab("log(Population)")
# Identify high risk counties based on p-values
find.std.residual <- function(county.data, variable, null.prob){
# Add columns for expected null, stdev null, residual, and standardized residualto the data frame
result <- mutate(county.data,
expected.null = population * null.prob,
st.dev.null = sqrt(expected.null * (1 - null.prob)),
residual = variable - expected.null,
std.residual = residual / st.dev.null)
# Order by std.residual
result <- result[order(-result$std.residual),]
# return the resulting data frame
result
}
